/*
import AbstractController from '@inti5/app-backend/Module/AbstractController';
import { ActionResult, Route } from '@inti5/app-backend/Router';
import NodeStateUpdateDto from '#/Watchdog/Domain/Dto/NodeStateUpdateDto';
import { Assert, Validate } from '@inti5/validator/Function';
import NodeState from '#/Watchdog/Domain/Model/MetricState/NodeState';
import { InitializeSymbol, Inject } from '@inti5/object-manager';
import EntityManagerWrapper from '#/Core/Service/EntityManagerWrapper';
import { EntityManager, EntityRepository } from '@mikro-orm/mysql';
import rateLimit from 'express-rate-limit';

export class NodeStateController
    extends AbstractController
{

    @Inject()
    protected entityManagerWrapper : EntityManagerWrapper;

    protected entityManager : EntityManager;

    protected nodeStateRepository : EntityRepository<NodeState>;


    public async [InitializeSymbol] ()
    {
        this.entityManager = this.entityManagerWrapper.getDirectEntityManager();
        this.nodeStateRepository = this.entityManager.getRepository(NodeState);
    }

    @Route.POST('/state/node', {
        middlewares: [
            rateLimit({ windowMs: 5 * 60 * 1000, max: 5 })
        ]
    })
    @Validate()
    public async index (
        params : any,
        @Assert({
            presence: true
        }, true)
        nodeStateUpdateDto : NodeStateUpdateDto
    )
    {
        const nodeState = await this.nodeStateRepository.findOne({ nodeKey: nodeStateUpdateDto.nodeKey });
        if (!nodeState) {
            throw new ActionResult({ code: 404 });
        }

        nodeState.assign(nodeStateUpdateDto, { onlyProperties: true });

        await this.entityManager.flush();

        return true;
    }

}
*/
